{"ast":null,"code":"var _jsxFileName = \"/Users/solomonmcharo/Desktop/Javascript-stuff/huduma-chap-chap/client/src/components/Forms/addInfo.js\";\nimport React, { Component, isValidElement } from 'react';\nimport axios from 'axios';\nimport validator from 'validator';\nimport styled from 'styled-components';\nimport Input from '../UI/Input/input.js';\nimport { Form, Button } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass addInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      addInfo: {\n        description: {\n          elementType: \"textarea\",\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Name of Task',\n            id: \"task\"\n          },\n          value: '',\n          label: 'Description',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          errors: []\n        },\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name',\n            id: \"name\"\n          },\n          value: '',\n          label: 'Name',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'email',\n            placeholder: 'example@email.com',\n            id: \"email\"\n          },\n          value: '',\n          label: 'Email',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          errors: []\n        },\n        education: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: '',\n              displayValue: ''\n            }, {\n              value: 'High School Certificate',\n              displayValue: 'High School Certificate'\n            }, {\n              value: 'Diploma',\n              displayValue: 'Diploma'\n            }, {\n              value: 'Associates',\n              displayValue: 'Associates'\n            }, {\n              value: 'Bachelors',\n              displayValue: 'Bachelors'\n            }, {\n              value: 'Masters',\n              displayValue: 'Master'\n            }, {\n              value: 'Doctorate',\n              displayValue: 'Doctorate'\n            }],\n            placeholder: 'Education',\n            id: \"userType\"\n          },\n          value: '',\n          label: 'Education',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        yearsExperience: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'Number',\n            placeholder: 'years of experience',\n            id: \"name\"\n          },\n          value: '',\n          label: 'Years of Experience',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      person: {},\n      formisValid: false,\n      loggedIn: false,\n      loggedInPerson: {}\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedCreateForm = { ...this.state.addInfo\n      };\n      const updatedFormElement = { ...updatedCreateForm[inputIdentifier]\n      };\n      updatedFormElement.errors = [];\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation, updatedFormElement);\n      updatedFormElement.touched = true;\n      console.log(updatedFormElement);\n      updatedCreateForm[inputIdentifier] = updatedFormElement;\n      let formisValid = true;\n\n      for (let inputIdentifier in updatedCreateForm) {\n        formisValid = updatedCreateForm[inputIdentifier].valid && formisValid;\n      }\n\n      this.setState({\n        addInfo: updatedCreateForm,\n        formisValid\n      });\n    };\n\n    this.onSubmit = props => {\n      props.preventDefault();\n      const name = this.state.addInfo.name.value;\n      const description = this.state.addInfo.description.value;\n      const email = this.state.addInfo.email.value;\n      const owner = this.state.person._id;\n      const message = this.state.addInfo.message.value;\n      console.log(owner);\n      const data = {\n        name,\n        description,\n        email,\n        owner,\n        message\n      };\n      console.log(data);\n      axios.post('http://localhost:3000/thetasks', data).then(response => {\n        console.log(response.data);\n        this.setState({\n          loggedIn: true\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n  }\n\n  componentDidMount() {\n    let url = window.location.search;\n    url = url.split(\"=\")[1];\n    axios.get('http://localhost:3000/users/' + url).then(response => {\n      this.setState({\n        person: response.data\n      });\n      console.log(this.state.person);\n    });\n\n    if (localStorage.getItem(\"thisToken\") !== \"Bearer \" && localStorage.getItem(\"thisToken\")) {\n      let config = {\n        headers: {\n          Authorization: localStorage.getItem(\"thisToken\")\n        }\n      };\n      axios.get('http://localhost:3000/users/me', config).then(response => {\n        this.setState({\n          person: response.data,\n          loggedIn: true\n        });\n        console.log(this.state.loggedInPerson);\n        this.state.addInfo.description.value = this.state.person.description;\n      });\n    }\n  }\n\n  checkValidity(value, rules, element) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n\n      if (!isValid) {\n        element.errors.push(\"This field must not be empty\");\n      }\n    }\n\n    if (rules.minLength) {\n      const minChar = rules.minLength;\n      isValid = value.length >= rules.minLength && isValid;\n      const errorMessage = \"Input must be \" + minChar + \" characters long\";\n\n      if (!isValid) {\n        element.errors.push(errorMessage);\n      }\n    }\n\n    if (rules.isEmail) {\n      isValid = validator.isEmail(value) && isValid;\n\n      if (!isValid && value.trim() !== '') {\n        element.errors.push(\"Must be a Valid Email\");\n      }\n    }\n\n    if (rules.confirmPassword) {\n      isValid = value === this.state.addInfo.password.value && isValid;\n\n      if (!isValid) {\n        element.errors.push(\"Passwords Must Match\");\n      }\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const divStyle = {\n      \"width\": \"400px\",\n      \"height\": \"80px\",\n      \"wordWrap\": \"breakWord\"\n    };\n    const formElementsArray = [];\n\n    for (let key in this.state.addInfo) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.addInfo[key]\n      });\n    }\n\n    return (\n      /*#__PURE__*/\n      //    <div className=\"Person\" >\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Update Your Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"myForm\",\n          className: \"form\",\n          ref: form => this.messageForm = form,\n          onSubmit: this.onSubmit.bind(this),\n          children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.config.value,\n            label: formElement.config.label,\n            shouldValidate: formElement.config.validation,\n            invalid: !formElement.config.valid,\n            changed: event => this.inputChangedHandler(event, formElement.id),\n            touched: formElement.config.touched,\n            errors: formElement.config.errors\n          }, formElement.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 8\n          }, this)), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            disabled: !this.state.formisValid,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 6\n      }, this)\n    );\n  }\n\n}\n\nexport default addInfo;","map":{"version":3,"sources":["/Users/solomonmcharo/Desktop/Javascript-stuff/huduma-chap-chap/client/src/components/Forms/addInfo.js"],"names":["React","Component","isValidElement","axios","validator","styled","Input","Form","Button","Link","Redirect","addInfo","state","description","elementType","elementConfig","type","placeholder","id","value","label","validation","required","valid","touched","errors","name","email","isEmail","education","options","displayValue","yearsExperience","person","formisValid","loggedIn","loggedInPerson","inputChangedHandler","event","inputIdentifier","updatedCreateForm","updatedFormElement","target","checkValidity","console","log","setState","onSubmit","props","preventDefault","owner","_id","message","data","post","then","response","catch","error","componentDidMount","url","window","location","search","split","get","localStorage","getItem","config","headers","Authorization","rules","element","isValid","trim","push","minLength","minChar","length","errorMessage","confirmPassword","password","render","divStyle","formElementsArray","key","form","messageForm","bind","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component, isValidElement} from 'react';\nimport axios from 'axios';\nimport validator from 'validator';\nimport styled from 'styled-components'\nimport Input from '../UI/Input/input.js';\nimport {Form , Button} from 'react-bootstrap'\nimport {Link, Redirect} from 'react-router-dom'\n\nclass addInfo extends Component{\n  state = {\n    addInfo:{\n      description:{\n        elementType: \"textarea\",\n        elementConfig:{\n          type:'text',\n          placeholder:'Name of Task',\n          id:\"task\"\n        },\n        value: '',\n        label: 'Description',\n        validation: {\n           required:true,\n           \n        },\n        valid:false,\n        touched: false,\n        errors:[]\n\n      },\n      name:{\n        elementType: \"input\",\n        elementConfig:{\n          type:'text',\n          placeholder:'Your Name',\n          id:\"name\"\n        },\n        value: '',\n        label: 'Name',\n        validation: {\n           required:true,\n           \n        },\n        valid:false,\n        touched: false\n\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig:{\n          type:'email',\n          placeholder:'example@email.com',\n          id:\"email\"\n        },\n        value: '',\n        label: 'Email',\n        validation: {\n          required:true,\n          isEmail: true,\n          \n       },\n       valid:false,\n       errors:[]\n       \n\n      },\n      education: {\n        elementType: \"select\",\n        elementConfig:{\n          options: [\n            {value:'', displayValue:''},\n            {value:'High School Certificate', displayValue:'High School Certificate'},\n            {value:'Diploma', displayValue:'Diploma'},\n            {value:'Associates', displayValue:'Associates'},\n            {value:'Bachelors', displayValue:'Bachelors'},\n            {value:'Masters', displayValue:'Master'},\n            {value:'Doctorate', displayValue:'Doctorate'},\n            \n\n          ],\n          placeholder:'Education',\n          id:\"userType\",\n          \n        },\n        value: '',\n        label: 'Education',\n        validation: {\n        required:true,\n        \n        },\n        valid:false,\n        touched: false\n    },\n        yearsExperience:{        \n            elementType: \"input\",\n            elementConfig:{\n                type:'Number',\n                placeholder:'years of experience',\n                id:\"name\"\n            },\n            value: '',\n            label: 'Years of Experience',\n            validation: {\n            required:true,\n            \n            },\n            valid:false,\n            touched: false\n\n\n        },\n            },\n    person:{},\n    formisValid: false,\n    loggedIn : false,\n    loggedInPerson : {\n\n    },\n\n  \n}\n  componentDidMount(){\n    let url = window.location.search;\n    url = url.split(\"=\")[1]\n    axios.get('http://localhost:3000/users/'+url).then(response =>{\n        this.setState({person:response.data})\n        console.log(this.state.person);\n     });\n     \n     \n     if(localStorage.getItem(\"thisToken\") !== \"Bearer \" && localStorage.getItem(\"thisToken\")){\n        let config = {\n            headers:{\n                Authorization: localStorage.getItem(\"thisToken\") \n            }\n        }\n        axios.get('http://localhost:3000/users/me',config).then(response =>{\n        this.setState({person:response.data, loggedIn: true})\n        console.log(this.state.loggedInPerson);\n        this.state.addInfo.description.value = this.state.person.description;\n     });\n        \n    }\n\n  }\n  checkValidity(value, rules, element){\n    let isValid = true;\n    if(rules.required){\n        isValid = value.trim() !=='' && isValid;\n        if(!isValid){\n        element.errors.push(\"This field must not be empty\")\n        }\n    }\n    if(rules.minLength){\n      const minChar = rules.minLength\n      isValid = value.length >= rules.minLength && isValid;\n      const errorMessage = \"Input must be \" + minChar + \" characters long\"\n      if(!isValid){\n        element.errors.push(errorMessage)\n        }\n    }\n    if(rules.isEmail){\n      isValid = validator.isEmail(value)  && isValid ;\n      if(!isValid && value.trim()!== ''){\n        element.errors.push(\"Must be a Valid Email\")\n        }\n  }\n    if(rules.confirmPassword){\n      isValid = value === this.state.addInfo.password.value && isValid\n      if(!isValid){\n      element.errors.push(\"Passwords Must Match\")\n      }\n    }\n    return isValid\n  }\n  inputChangedHandler = (event, inputIdentifier) =>{\n   const updatedCreateForm = {\n     ...this.state.addInfo\n   };\n   const updatedFormElement = {\n     ...updatedCreateForm[inputIdentifier]\n   };\n   updatedFormElement.errors = []\n   updatedFormElement.value = event.target.value\n   updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation, updatedFormElement)\n   updatedFormElement.touched = true\n   console.log(updatedFormElement)\n   updatedCreateForm[inputIdentifier] = updatedFormElement\n   let formisValid = true; \n   for(let inputIdentifier in updatedCreateForm){\n     formisValid = updatedCreateForm[inputIdentifier].valid && formisValid\n   }\n   this.setState({addInfo: updatedCreateForm, formisValid });\n  }\n\n  onSubmit = (props) =>{ \n    props.preventDefault();\n\n    const name = this.state.addInfo.name.value;\n    const description = this.state.addInfo.description.value;\n    const email = this.state.addInfo.email.value;\n    const owner = this.state.person._id;\n    const message = this.state.addInfo.message.value;\n    console.log(owner);\n    const data = {\n      name,\n      description,\n      email,\n      owner,\n      message\n    }\n    console.log(data)\n    axios.post('http://localhost:3000/thetasks', data)\n    .then( (response) => {\n      console.log(response.data);\n      this.setState({loggedIn: true});\n    })\n    .catch((error) => {\n      console.log(error);\n      \n    });\n  }\n\n\n  render(){\n      const divStyle = {\n          \"width\":\"400px\",\n           \"height\":\"80px\",\n           \"wordWrap\": \"breakWord\"\n      }\n    const formElementsArray = [];\n    for(let key in this.state.addInfo){\n      formElementsArray.push({\n        id: key,\n        config:this.state.addInfo[key]\n      })\n\n    }\n    return (\n     //    <div className=\"Person\" >\n     <div>\n         <h1>Update Your Information</h1>\n        \n     <form id='myForm'\n            className=\"form\"\n            ref= { form => this.messageForm = form }\n            onSubmit={ this.onSubmit.bind( this )}>\n     {formElementsArray.map(formElement =>(\n       <Input\n            key={formElement.id}\n            elementType = {formElement.config.elementType}\n            elementConfig = {formElement.config.elementConfig}\n            value = {formElement.config.value}\n            label = {formElement.config.label}\n            shouldValidate={formElement.config.validation}\n            invalid={!formElement.config.valid}\n            changed = {(event) => this.inputChangedHandler(event, formElement.id )}\n            touched= {formElement.config.touched}\n            errors = {formElement.config.errors}\n       />\n     ))}\n     \n     <Button variant=\"primary\" type=\"submit\" disabled={!this.state.formisValid}>\n       Submit\n     </Button>\n    \n   </form>\n  \n   </div>\n    );\n    }\n }\n \n export default addInfo;"]},"metadata":{},"sourceType":"module"}