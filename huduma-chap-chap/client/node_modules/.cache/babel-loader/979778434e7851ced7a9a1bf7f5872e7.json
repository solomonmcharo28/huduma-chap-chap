{"ast":null,"code":"var _jsxFileName = \"/Users/solomonmcharo/Desktop/Javascript-stuff/huduma-chap-chap/client/src/components/Forms/createUser.js\";\nimport React, { Component, isValidElement } from 'react';\nimport axios from 'axios';\nimport validator from 'validator';\nimport styled from 'styled-components';\nimport Input from '../UI/Input/input.js';\nimport { Form, Button } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreateForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      createForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name',\n            id: \"name\"\n          },\n          value: '',\n          label: 'Name',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'email',\n            placeholder: 'example@email.com',\n            id: \"email\"\n          },\n          value: '',\n          label: 'Email',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          errors: []\n        },\n        userType: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: '',\n              displayValue: ''\n            }, {\n              value: 'Service Provider',\n              displayValue: 'Service Provider'\n            }, {\n              value: 'Employer',\n              displayValue: 'Employer'\n            }, {\n              value: 'HR Manager',\n              displayValue: 'Human Resource Manager'\n            }],\n            placeholder: 'Your Name',\n            id: \"userType\"\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          value: '',\n          label: 'User Type',\n          touched: false,\n          errors: []\n        },\n        occupation: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: '',\n              displayValue: ''\n            }, {\n              value: 'Mechanic',\n              displayValue: 'Mechanic'\n            }, {\n              value: 'Carpenter',\n              displayValue: 'Carpenter'\n            }, {\n              value: 'Electrician',\n              displayValue: 'Electrician'\n            }, {\n              value: 'BlackSmith',\n              displayValue: 'BlackSmith'\n            }, {\n              value: 'Lawyer',\n              displayValue: 'Lawyer'\n            }, {\n              value: 'Driver',\n              displayValue: 'Driver'\n            }, {\n              value: 'Self-Employed',\n              displayValue: 'Self-Employed'\n            }, {\n              value: 'Private Sector Worker',\n              displayValue: 'Private Sector Worker'\n            }, {\n              value: 'Government Official/Company',\n              displayValue: 'Government Official/Company'\n            }],\n            id: \"occupation\"\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          value: '',\n          label: 'Occupation',\n          touched: false,\n          errors: []\n        },\n        birthdate: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'date',\n            id: \"date\"\n          },\n          value: '',\n          label: 'BirthDate',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          errors: []\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'password',\n            placeholder: \"password\",\n            id: \"password\"\n          },\n          value: '',\n          label: 'Password',\n          validation: {\n            required: true,\n            minLength: 8\n          },\n          valid: false,\n          touched: false,\n          errors: []\n        },\n        comfirmpassword: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'password',\n            placeholder: \"confirm password\"\n          },\n          value: '',\n          label: 'Confirm Password',\n          validation: {\n            required: true,\n            confirmPassword: true\n          },\n          valid: false,\n          touched: false,\n          errors: []\n        }\n      },\n      formisValid: false,\n      loggedIn: false\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedCreateForm = { ...this.state.createForm\n      };\n      const updatedFormElement = { ...updatedCreateForm[inputIdentifier]\n      };\n      updatedFormElement.errors = [];\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation, updatedFormElement);\n      updatedFormElement.touched = true;\n      console.log(updatedFormElement);\n      updatedCreateForm[inputIdentifier] = updatedFormElement;\n      let formisValid = true;\n\n      for (let inputIdentifier in updatedCreateForm) {\n        formisValid = updatedCreateForm[inputIdentifier].valid && formisValid;\n      }\n\n      this.setState({\n        createForm: updatedCreateForm,\n        formisValid\n      });\n    };\n\n    this.onSubmit = props => {\n      let todayDate = Date.now();\n      let newDate = new Date(this.state.createForm.birthdate.value);\n      props.preventDefault();\n      const name = this.state.createForm.name.value;\n      const userType = this.state.createForm.userType.value;\n      const occupation = this.state.createForm.occupation.value;\n      const age = Math.floor((todayDate - newDate) / (1000 * 3600 * 24 * 365));\n      const email = this.state.createForm.email.value;\n      const password = this.state.createForm.password.value;\n      console.log(age);\n      const data = {\n        name,\n        occupation,\n        userType,\n        age,\n        email,\n        password\n      };\n      console.log(data);\n      axios.post('http://localhost:3000/users', data).then(response => {\n        console.log(response.data);\n        this.setState({\n          loggedIn: true\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n  }\n\n  checkValidity(value, rules, element) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n\n      if (!isValid) {\n        element.errors.push(\"This field must not be empty\");\n      }\n    }\n\n    if (rules.minLength) {\n      const minChar = rules.minLength;\n      isValid = value.length >= rules.minLength && isValid;\n      const errorMessage = \"Input must be \" + minChar + \" characters long\";\n\n      if (!isValid && value.trim() !== '') {\n        element.errors.push(errorMessage);\n      }\n    }\n\n    if (rules.isEmail) {\n      isValid = validator.isEmail(value) && isValid;\n\n      if (!isValid && value.trim() !== '') {\n        element.errors.push(\"Must be a Valid Email\");\n      }\n    }\n\n    if (rules.confirmPassword) {\n      isValid = value === this.state.createForm.password.value && isValid;\n\n      if (!isValid && value.trim() !== '') {\n        element.errors.push(\"Passwords Must Match\");\n      }\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.createForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.createForm[key]\n      });\n    }\n\n    return (\n      /*#__PURE__*/\n      //    <div className=\"Person\" >\n      _jsxDEV(\"div\", {\n        className: \"register\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Registration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          id: \"myForm\",\n          className: \"form\",\n          ref: form => this.messageForm = form,\n          onSubmit: this.onSubmit.bind(this),\n          children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.config.value,\n            label: formElement.config.label,\n            shouldValidate: formElement.config.validation,\n            invalid: !formElement.config.valid,\n            changed: event => this.inputChangedHandler(event, formElement.id),\n            touched: formElement.config.touched,\n            errors: formElement.config.errors\n          }, formElement.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 8\n          }, this)), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            disabled: !this.state.formisValid,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 6\n          }, this), this.state.loggedIn ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 28\n          }, this) : console.log(\"\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 6\n      }, this)\n    );\n  }\n\n}\n\nexport default CreateForm;","map":{"version":3,"sources":["/Users/solomonmcharo/Desktop/Javascript-stuff/huduma-chap-chap/client/src/components/Forms/createUser.js"],"names":["React","Component","isValidElement","axios","validator","styled","Input","Form","Button","Link","Redirect","CreateForm","state","createForm","name","elementType","elementConfig","type","placeholder","id","value","label","validation","required","valid","touched","email","isEmail","errors","userType","options","displayValue","occupation","birthdate","password","minLength","comfirmpassword","confirmPassword","formisValid","loggedIn","inputChangedHandler","event","inputIdentifier","updatedCreateForm","updatedFormElement","target","checkValidity","console","log","setState","onSubmit","props","todayDate","Date","now","newDate","preventDefault","age","Math","floor","data","post","then","response","catch","error","rules","element","isValid","trim","push","minChar","length","errorMessage","render","formElementsArray","key","config","form","messageForm","bind","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component, isValidElement} from 'react';\nimport axios from 'axios';\nimport validator from 'validator';\nimport styled from 'styled-components'\nimport Input from '../UI/Input/input.js';\nimport {Form , Button} from 'react-bootstrap'\nimport {Link, Redirect} from 'react-router-dom'\n\nclass CreateForm extends Component{\n  state = {\n    createForm:{\n      name:{\n        elementType: \"input\",\n        elementConfig:{\n          type:'text',\n          placeholder:'Your Name',\n          id:\"name\"\n        },\n        value: '',\n        label: 'Name',\n        validation: {\n           required:true,\n           \n        },\n        valid:false,\n        touched: false\n\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig:{\n          type:'email',\n          placeholder:'example@email.com',\n          id:\"email\"\n        },\n        value: '',\n        label: 'Email',\n        validation: {\n          required:true,\n          isEmail: true,\n          \n       },\n       valid:false,\n       errors:[]\n       \n\n      },\n      userType: {\n        elementType: \"select\",\n        elementConfig:{\n          options: [\n            {value:'', displayValue:''},\n            {value:'Service Provider', displayValue:'Service Provider'},\n            {value:'Employer', displayValue:'Employer'},\n            {value:'HR Manager', displayValue:'Human Resource Manager'}\n          ],\n          placeholder:'Your Name',\n          id:\"userType\",\n          \n        },\n        validation: {\n          required:true,\n          \n       },\n       valid:false,\n        value:'',\n        label: 'User Type',\n        touched: false,\n        errors:[]\n\n      },\n      occupation: {\n        elementType: \"select\",\n        elementConfig:{\n          options: [\n            {value:'', displayValue:''},\n            {value:'Mechanic', displayValue:'Mechanic'},\n            {value:'Carpenter', displayValue:'Carpenter'},\n            {value:'Electrician', displayValue:'Electrician'},\n            {value:'BlackSmith', displayValue:'BlackSmith'},\n            {value:'Lawyer', displayValue:'Lawyer'},\n            {value:'Driver', displayValue:'Driver'},\n            {value:'Self-Employed', displayValue:'Self-Employed'},\n            {value:'Private Sector Worker', displayValue:'Private Sector Worker'},\n            {value:'Government Official/Company', displayValue:'Government Official/Company'}\n          ],\n          \n          id:\"occupation\",\n          \n        },\n        validation: {\n          required:true,\n          \n       },\n       valid:false,\n        value:'',\n        label: 'Occupation',\n        touched: false,\n        errors:[]\n        },\n      birthdate: {\n          elementType: \"input\",\n          elementConfig:{\n          type:'date',\n          id:\"date\"\n        },\n        value: '',\n        label: 'BirthDate',\n        validation: {\n          required:true,\n          \n       },\n       valid:false,\n       touched: false,\n       errors:[]\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig:{\n        type:'password',\n        placeholder:\"password\",\n        id:\"password\"\n        },\n      value: '',\n      label: 'Password',\n      validation: {\n        required:true,\n        minLength:8,\n\n        \n     },\n     valid:false,\n     touched: false,\n     errors:[]\n      },\n      comfirmpassword: {\n        elementType: \"input\",\n        elementConfig:{\n        type:'password',\n        placeholder:\"confirm password\"\n        },\n      value: '',\n      label: 'Confirm Password',\n      validation: {\n        required:true,\n        confirmPassword: true,\n        \n     },\n     valid:false,\n     touched: false,\n     errors:[]\n      },\n\n    },\n    formisValid: false,\n    loggedIn : false\n\n  }\n  checkValidity(value, rules, element){\n    let isValid = true;\n    if(rules.required){\n      isValid = value.trim() !=='' && isValid;\n      if(!isValid){\n      element.errors.push(\"This field must not be empty\")\n      }\n  }\n  if(rules.minLength){\n    const minChar = rules.minLength\n    isValid = value.length >= rules.minLength && isValid;\n    const errorMessage = \"Input must be \" + minChar + \" characters long\"\n    if(!isValid && value.trim()!== ''){\n      element.errors.push(errorMessage)\n      }\n  }\n  if(rules.isEmail){\n    isValid = validator.isEmail(value)  && isValid ;\n    if(!isValid && value.trim()!== ''){\n      element.errors.push(\"Must be a Valid Email\")\n      }\n}\n    if(rules.confirmPassword){\n      isValid = value === this.state.createForm.password.value && isValid\n      if(!isValid && value.trim()!== ''){\n      element.errors.push(\"Passwords Must Match\")\n      }\n    }\n\n    return isValid\n  }\n  inputChangedHandler = (event, inputIdentifier) =>{\n   const updatedCreateForm = {\n     ...this.state.createForm\n   };\n   const updatedFormElement = {\n     ...updatedCreateForm[inputIdentifier]\n   };\n   updatedFormElement.errors = []\n   updatedFormElement.value = event.target.value\n   updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation, updatedFormElement)\n   updatedFormElement.touched = true\n   console.log(updatedFormElement)\n   updatedCreateForm[inputIdentifier] = updatedFormElement\n   let formisValid = true; \n   for(let inputIdentifier in updatedCreateForm){\n     formisValid = updatedCreateForm[inputIdentifier].valid && formisValid\n   }\n   this.setState({createForm: updatedCreateForm, formisValid });\n  }\n\n  onSubmit = (props) =>{ \n    let todayDate = Date.now();\n    let newDate = new Date(this.state.createForm.birthdate.value);\n    props.preventDefault();\n    \n    const name = this.state.createForm.name.value;\n    const userType = this.state.createForm.userType.value;\n    const occupation = this.state.createForm.occupation.value;\n    const age = Math.floor((todayDate - newDate)/(1000*3600*24*365));\n    const email = this.state.createForm.email.value;\n    const password = this.state.createForm.password.value;\n    console.log(age);\n    const data = {\n      name,\n      occupation,\n      userType,\n      age,\n      email,\n      password\n    }\n    console.log(data)\n    axios.post('http://localhost:3000/users', data)\n    .then( (response) => {\n      console.log(response.data);\n      this.setState({loggedIn: true});\n    })\n    .catch((error) => {\n      console.log(error);\n      \n    });\n  }\n\n\n  render(){\n    const formElementsArray = [];\n    for(let key in this.state.createForm){\n      formElementsArray.push({\n        id: key,\n        config:this.state.createForm[key]\n      })\n\n    }\n    return (\n     //    <div className=\"Person\" >\n     <div className=\"register\">\n       \n         <h1>Registration</h1>\n         <hr className=\"line\"></hr>\n     <Form id='myForm'\n            className=\"form\"\n            ref= { form => this.messageForm = form }\n            onSubmit={ this.onSubmit.bind( this )}>\n     {formElementsArray.map(formElement =>(\n       <Input\n            key={formElement.id}\n            elementType = {formElement.config.elementType}\n            elementConfig = {formElement.config.elementConfig}\n            value = {formElement.config.value}\n            label = {formElement.config.label}\n            shouldValidate={formElement.config.validation}\n            invalid={!formElement.config.valid}\n            changed = {(event) => this.inputChangedHandler(event, formElement.id )}\n            touched= {formElement.config.touched}\n            errors = {formElement.config.errors}\n       />\n     ))}\n     \n     <Button variant=\"primary\" type=\"submit\" disabled={!this.state.formisValid}>\n       Submit\n     </Button>\n     {this.state.loggedIn? <Redirect to=\"/login\" /> : console.log(\"\")}\n   </Form>\n   </div>\n    );\n    }\n }\n \n export default CreateForm;"]},"metadata":{},"sourceType":"module"}