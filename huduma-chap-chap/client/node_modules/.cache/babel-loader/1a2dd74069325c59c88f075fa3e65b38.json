{"ast":null,"code":"var _jsxFileName = \"/Users/solomonmcharo/Desktop/Javascript-stuff/huduma-chap-chap/client/src/components/Forms/createTask.js\";\nimport React, { Component, isValidElement } from 'react';\nimport axios from 'axios';\nimport validator from 'validator';\nimport './formClasses.css';\nimport styled from 'styled-components';\nimport Input from '../UI/Input/input.js';\nimport { Form, Button } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TaskForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      taskForm: {\n        description: {\n          elementType: \"textarea\",\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Name of Task',\n            id: \"task\"\n          },\n          value: '',\n          label: 'Task',\n          validation: {\n            required: true,\n            minLength: 5\n          },\n          valid: false,\n          touched: false,\n          errors: []\n        },\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name',\n            id: \"name\"\n          },\n          value: '',\n          label: 'Name',\n          validation: {\n            required: true,\n            minLength: 2\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'email',\n            placeholder: 'example@email.com',\n            id: \"email\"\n          },\n          value: '',\n          label: 'Email',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          errors: []\n        },\n        dueDate: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'date',\n            id: \"date\"\n          },\n          value: '',\n          label: 'Due Date',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          errors: []\n        },\n        message: {\n          elementType: \"textarea\",\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Message',\n            id: \"message\"\n          },\n          value: '',\n          label: 'Message',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          errors: []\n        }\n      },\n      person: {},\n      formisValid: false,\n      loggedIn: false,\n      loggedInPerson: {}\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedCreateForm = { ...this.state.taskForm\n      };\n      const updatedFormElement = { ...updatedCreateForm[inputIdentifier]\n      };\n      updatedFormElement.errors = [];\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation, updatedFormElement);\n      updatedFormElement.touched = true;\n      console.log(updatedFormElement);\n      updatedCreateForm[inputIdentifier] = updatedFormElement;\n      let formisValid = true;\n\n      for (let inputIdentifier in updatedCreateForm) {\n        formisValid = updatedCreateForm[inputIdentifier].valid && formisValid;\n      }\n\n      this.setState({\n        taskForm: updatedCreateForm,\n        formisValid\n      });\n    };\n\n    this.onSubmit = props => {\n      props.preventDefault();\n      let dueDate = new Date(this.state.taskForm.dueDate.value);\n      let url = window.location.search;\n      url = url.split(\"=\")[1];\n      const name = this.state.taskForm.name.value;\n      const description = this.state.taskForm.description.value;\n      const email = this.state.taskForm.email.value;\n      const owner = this.state.person._id;\n      const message = this.state.taskForm.message.value;\n      const sender = this.state.loggedInPerson._id;\n      console.log(owner);\n      const data = {\n        name,\n        dueDate,\n        description,\n        email,\n        owner,\n        message,\n        sender\n      };\n      console.log(data);\n      axios.post('http://localhost:3000/thetasks', data).then(response => {\n        console.log(response.data);\n        this.setState({\n          loggedIn: true\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n  }\n\n  componentDidMount() {\n    let url = window.location.search;\n    url = url.split(\"=\")[1];\n    axios.get('http://localhost:3000/users/' + url).then(response => {\n      this.setState({\n        person: response.data\n      });\n      console.log(this.state.person);\n    });\n\n    if (localStorage.getItem(\"thisToken\") !== \"Bearer \" && localStorage.getItem(\"thisToken\")) {\n      let config = {\n        headers: {\n          Authorization: localStorage.getItem(\"thisToken\")\n        }\n      };\n      axios.get('http://localhost:3000/users/me', config).then(response => {\n        this.setState({\n          loggedInPerson: response.data\n        });\n        console.log(this.state.loggedInPerson);\n        this.state.taskForm.name.value = this.state.loggedInPerson.name;\n        this.state.taskForm.email.value = this.state.loggedInPerson.email;\n      });\n    }\n  }\n\n  checkValidity(value, rules, element) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n\n      if (!isValid) {\n        element.errors.push(\"This field must not be empty\");\n      }\n    }\n\n    if (rules.isEmail) {\n      isValid = validator.isEmail(value) && isValid;\n\n      if (!isValid && value.trim() !== '') {\n        element.errors.push(\"Must be a Valid Email\");\n      }\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const divStyle = {\n      \"width\": \"400px\",\n      \"height\": \"80px\",\n      \"wordWrap\": \"breakWord\"\n    };\n    const formElementsArray = [];\n\n    for (let key in this.state.taskForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.taskForm[key]\n      });\n    }\n\n    return (\n      /*#__PURE__*/\n      //    <div className=\"Person\" >\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"userInfo\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" \", this.state.person.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: this.state.person.occupation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: divStyle,\n            children: [\"Description: \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.person.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 47\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Education: \", this.state.person.education]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Experience: \", this.state.person.experience]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"myForm\",\n          className: \"taskForm\",\n          ref: form => this.messageForm = form,\n          onSubmit: this.onSubmit.bind(this),\n          children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n            elementType: formElement.config.elementType,\n            elementConfig: formElement.config.elementConfig,\n            value: formElement.config.value,\n            label: formElement.config.label,\n            shouldValidate: formElement.config.validation,\n            invalid: !formElement.config.valid,\n            changed: event => this.inputChangedHandler(event, formElement.id),\n            touched: formElement.config.touched,\n            errors: formElement.config.errors\n          }, formElement.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 8\n          }, this)), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            disabled: !this.state.formisValid,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 6\n          }, this), this.state.loggedIn ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 28\n          }, this) : console.log(\"\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 6\n      }, this)\n    );\n  }\n\n}\n\nexport default TaskForm;","map":{"version":3,"sources":["/Users/solomonmcharo/Desktop/Javascript-stuff/huduma-chap-chap/client/src/components/Forms/createTask.js"],"names":["React","Component","isValidElement","axios","validator","styled","Input","Form","Button","Link","Redirect","TaskForm","state","taskForm","description","elementType","elementConfig","type","placeholder","id","value","label","validation","required","minLength","valid","touched","errors","name","email","isEmail","dueDate","message","person","formisValid","loggedIn","loggedInPerson","inputChangedHandler","event","inputIdentifier","updatedCreateForm","updatedFormElement","target","checkValidity","console","log","setState","onSubmit","props","preventDefault","Date","url","window","location","search","split","owner","_id","sender","data","post","then","response","catch","error","componentDidMount","get","localStorage","getItem","config","headers","Authorization","rules","element","isValid","trim","push","render","divStyle","formElementsArray","key","occupation","education","experience","form","messageForm","bind","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component, isValidElement} from 'react';\nimport axios from 'axios';\nimport validator from 'validator';\nimport './formClasses.css'\nimport styled from 'styled-components'\nimport Input from '../UI/Input/input.js';\nimport {Form , Button} from 'react-bootstrap'\nimport {Link, Redirect} from 'react-router-dom'\n\nclass TaskForm extends Component{\n  state = {\n    taskForm:{\n      description:{\n        elementType: \"textarea\",\n        elementConfig:{\n          type:'text',\n          placeholder:'Name of Task',\n          id:\"task\"\n        },\n        value: '',\n        label: 'Task',\n        validation: {\n           required:true,\n            minLength:5\n        },\n        valid:false,\n        touched: false,\n        errors:[]\n\n      },\n      name:{\n        elementType: \"input\",\n        elementConfig:{\n          type:'text',\n          placeholder:'Your Name',\n          id:\"name\"\n        },\n        value: '',\n        label: 'Name',\n        validation: {\n           required:true,\n            minLength:2\n        },\n        valid:false,\n        touched: false\n\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig:{\n          type:'email',\n          placeholder:'example@email.com',\n          id:\"email\"\n        },\n        value: '',\n        label: 'Email',\n        validation: {\n          required:true,\n          isEmail: true,\n          \n       },\n       valid:false,\n       errors:[]\n       \n\n      },\n      dueDate: {\n          elementType: \"input\",\n          elementConfig:{\n          type:'date',\n          id:\"date\"\n        },\n        value: '',\n        label: 'Due Date',\n        validation: {\n          required:true,\n          \n       },\n       valid:false,\n       touched: false,\n       errors:[]\n      },\n      message:{\n        elementType: \"textarea\",\n        elementConfig:{\n          type:'text',\n          placeholder:'Your Message',\n          id:\"message\"\n        },\n        value: '',\n        label: 'Message',\n        validation: {\n           required:true,\n           \n        },\n        valid:false,\n        touched: false,\n        errors:[]\n        \n      }\n\n    },\n    person:{},\n    formisValid: false,\n    loggedIn : false,\n    loggedInPerson : {\n\n    },\n\n  }\n  componentDidMount(){\n    let url = window.location.search;\n    url = url.split(\"=\")[1]\n    axios.get('http://localhost:3000/users/'+url).then(response =>{\n        this.setState({person:response.data})\n        console.log(this.state.person);\n     });\n     \n     \n     if(localStorage.getItem(\"thisToken\") !== \"Bearer \" && localStorage.getItem(\"thisToken\")){\n        let config = {\n            headers:{\n                Authorization: localStorage.getItem(\"thisToken\") \n            }\n        }\n        axios.get('http://localhost:3000/users/me',config).then(response =>{\n        this.setState({loggedInPerson:response.data})\n        console.log(this.state.loggedInPerson);      \n\n\n        this.state.taskForm.name.value = this.state.loggedInPerson.name;\n        this.state.taskForm.email.value = this.state.loggedInPerson.email;\n      });\n        \n    }\n\n  }\n  checkValidity(value, rules, element){\n    let isValid = true;\n    if(rules.required){\n      isValid = value.trim() !=='' && isValid;\n      if(!isValid){\n      element.errors.push(\"This field must not be empty\")\n      }\n   }\n    if(rules.isEmail){\n      isValid = validator.isEmail(value)  && isValid ;\n      if(!isValid && value.trim()!== ''){\n        element.errors.push(\"Must be a Valid Email\")\n        }\n  }\n\n    return isValid\n  }\n  inputChangedHandler = (event, inputIdentifier) =>{\n   const updatedCreateForm = {\n     ...this.state.taskForm\n   };\n   const updatedFormElement = {\n     ...updatedCreateForm[inputIdentifier]\n   };\n   updatedFormElement.errors = []\n   updatedFormElement.value = event.target.value\n   updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation, updatedFormElement)\n   updatedFormElement.touched = true\n   console.log(updatedFormElement)\n   updatedCreateForm[inputIdentifier] = updatedFormElement\n   let formisValid = true; \n   for(let inputIdentifier in updatedCreateForm){\n     formisValid = updatedCreateForm[inputIdentifier].valid && formisValid\n   }\n   this.setState({taskForm: updatedCreateForm, formisValid });\n  }\n\n  onSubmit = (props) =>{ \n    props.preventDefault();\n    let dueDate = new Date(this.state.taskForm.dueDate.value);\n    let url = window.location.search;\n    url = url.split(\"=\")[1]\n    const name = this.state.taskForm.name.value;\n    const description = this.state.taskForm.description.value;\n    const email = this.state.taskForm.email.value;\n    const owner = this.state.person._id;\n    const message = this.state.taskForm.message.value;\n    const sender = this.state.loggedInPerson._id;\n    console.log(owner);\n    const data = {\n      name,\n      dueDate,\n      description,\n      email,\n      owner,\n      message,\n      sender\n    }\n    console.log(data)\n    axios.post('http://localhost:3000/thetasks', data)\n    .then( (response) => {\n      console.log(response.data);\n      this.setState({loggedIn: true});\n    })\n    .catch((error) => {\n      console.log(error);\n      \n    });\n  }\n\n\n  render(){\n      const divStyle = {\n          \"width\":\"400px\",\n           \"height\":\"80px\",\n           \"wordWrap\": \"breakWord\"\n      }\n    const formElementsArray = [];\n    for(let key in this.state.taskForm){\n      formElementsArray.push({\n        id: key,\n        config:this.state.taskForm[key]\n      })\n\n    }\n    return (\n     //    <div className=\"Person\" >\n     <div>\n       <div className=\"userInfo\">\n         <img></img>\n         <h3> {this.state.person.name}</h3>\n         <h4>{this.state.person.occupation}</h4>\n       <div className={divStyle}>Description: <p>{this.state.person.description}</p></div>\n       <h4>Education: {this.state.person.education}</h4>\n       <h4>Experience: {this.state.person.experience}</h4>\n       <p></p> \n       </div>\n       <br></br>\n     <form id='myForm'\n            className=\"taskForm\"\n            ref= { form => this.messageForm = form }\n            onSubmit={ this.onSubmit.bind( this )}>\n     {formElementsArray.map(formElement =>(\n       <Input\n            key={formElement.id}\n            elementType = {formElement.config.elementType}\n            elementConfig = {formElement.config.elementConfig}\n            value = {formElement.config.value}\n            label = {formElement.config.label}\n            shouldValidate={formElement.config.validation}\n            invalid={!formElement.config.valid}\n            changed = {(event) => this.inputChangedHandler(event, formElement.id )}\n            touched= {formElement.config.touched}\n            errors = {formElement.config.errors}\n       />\n     ))}\n     \n     <Button variant=\"primary\" type=\"submit\" disabled={!this.state.formisValid}>\n       Submit\n     </Button>\n     {this.state.loggedIn? <Redirect to=\"/\" /> : console.log(\"\")}\n   </form>\n  \n   </div>\n    );\n    }\n }\n \n export default TaskForm;"]},"metadata":{},"sourceType":"module"}