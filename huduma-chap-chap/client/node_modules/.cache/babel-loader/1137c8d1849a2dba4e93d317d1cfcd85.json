{"ast":null,"code":"var _jsxFileName = \"/Users/solomonmcharo/Desktop/Javascript-stuff/huduma-chap-chap/client/src/components/Modals/updatemodal.js\";\nimport React, { Component } from 'react'; // import './Person.css';\n\nimport { FaUserAlt, FaCheck } from 'react-icons/fa';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport Input from '../UI/Input/input';\nimport { Button, Modal, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UpdateModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      updateForm: {\n        billingMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: '',\n              displayValue: ''\n            }, {\n              value: 'Hourly',\n              displayValue: 'Hourly'\n            }, {\n              value: 'One-Time Fee',\n              displayValue: 'One-Time Fee'\n            }, {\n              value: 'Purchase',\n              displayValue: 'Purchase'\n            }],\n            id: \"billing\"\n          },\n          value: '',\n          label: 'Billing Method'\n        },\n        hours: {\n          elementType: \"input\",\n          elementConfig: {\n            type: 'number',\n            placeholder: \"estimated hours\",\n            id: \"hours\"\n          },\n          value: '',\n          label: 'Hours',\n          hidden: false\n        }\n      },\n      task: {},\n      show: true,\n      open: false\n    };\n\n    this.handleClose = props => {\n      this.setState({\n        show: false\n      });\n      this.setState({\n        open: false\n      });\n    };\n\n    this.handleOpen = props => {\n      this.setState({\n        open: true\n      });\n      this.setState({\n        show: true\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedCreateForm = { ...this.state.updateForm\n      };\n      const updatedFormElement = { ...updatedCreateForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedCreateForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        updateForm: updatedCreateForm\n      });\n    };\n\n    this.onSubmit = props => {\n      props.preventDefault();\n      const billingMethod = this.state.updateForm.billingMethod.value;\n      const hours = this.state.updateForm.hours.value;\n      const data = {\n        billingMethod,\n        hours\n      };\n      let config = {\n        headers: {\n          Authorization: localStorage.getItem(\"thisToken\")\n        }\n      };\n      axios.patch('http://localhost:3000/tasks/' + this.props.id, data, config).then(response => {\n        console.log(response.data);\n      }).catch(error => {\n        console.log(error.message);\n        this.setState({\n          validLogin: false\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    const myId = this.props.id;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.updateForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.updateForm[key]\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: this.state.open == false ? this.state.show : this.state.show,\n      onHide: this.handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Update the Request\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          id: \"myForm\",\n          className: \"form\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n              elementType: formElement.config.elementType,\n              elementConfig: formElement.config.elementConfig,\n              value: formElement.config.value,\n              label: formElement.config.label,\n              changed: event => this.inputChangedHandler(event, formElement.id)\n            }, formElement.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 8\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: this.handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: this.onSubmit,\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default UpdateModal;","map":{"version":3,"sources":["/Users/solomonmcharo/Desktop/Javascript-stuff/huduma-chap-chap/client/src/components/Modals/updatemodal.js"],"names":["React","Component","FaUserAlt","FaCheck","axios","styled","Input","Button","Modal","Form","Link","UpdateModal","state","updateForm","billingMethod","elementType","elementConfig","options","value","displayValue","id","label","hours","type","placeholder","hidden","task","show","open","handleClose","props","setState","handleOpen","inputChangedHandler","event","inputIdentifier","updatedCreateForm","updatedFormElement","target","onSubmit","preventDefault","data","config","headers","Authorization","localStorage","getItem","patch","then","response","console","log","catch","error","message","validLogin","componentDidMount","myId","render","formElementsArray","key","push","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n// import './Person.css';\nimport {FaUserAlt, FaCheck} from  'react-icons/fa'\nimport axios from 'axios'\nimport styled from 'styled-components'\nimport Input from '../UI/Input/input';\nimport {Button, Modal, Form} from 'react-bootstrap'\nimport {Link} from 'react-router-dom'\n\nclass UpdateModal extends Component{  \n    state={\n        updateForm:{\n          billingMethod: {\n            elementType: \"select\",\n            elementConfig:{\n              options: [\n                {value:'', displayValue:''},\n                {value:'Hourly', displayValue:'Hourly'},\n                {value:'One-Time Fee', displayValue:'One-Time Fee'},\n                {value:'Purchase', displayValue:'Purchase'}\n              ],\n              id:\"billing\"\n            },\n            value: '',\n            label: 'Billing Method'\n    \n          },\n          hours: {\n            elementType: \"input\",\n            elementConfig:{\n            type:'number',\n            placeholder:\"estimated hours\",\n            id:\"hours\"\n            },\n          value: '',\n          label: 'Hours',\n          hidden: false,\n          },\n          \n        },\n        task :{},\n        show : true,\n        open : false,\n    }\n        componentDidMount(){\n            const myId = this.props.id;\n        }\n      handleClose = (props) => {\n        \n        this.setState({show:false});\n        this.setState({open:false});\n        }\n        handleOpen = (props) => {\n        \n          this.setState({open:true});\n          this.setState({show:true});\n       }\n       inputChangedHandler = (event, inputIdentifier) =>{\n        const updatedCreateForm = {\n          ...this.state.updateForm\n        };\n        const updatedFormElement = {\n          ...updatedCreateForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value\n        updatedCreateForm[inputIdentifier] = updatedFormElement\n        this.setState({updateForm: updatedCreateForm});\n       }\n       onSubmit = (props) =>{ \n        props.preventDefault();\n        \n        const billingMethod = this.state.updateForm.billingMethod.value;\n        const hours = this.state.updateForm.hours.value;\n        const data = {\n          billingMethod,\n          hours\n        }\n        let config = {\n          headers:{\n            Authorization: localStorage.getItem(\"thisToken\")\n          }\n        }\n        axios.patch('http://localhost:3000/tasks/'+this.props.id , data, config)\n        .then((response) => {\n          console.log(response.data)\n      \n        })\n        .catch( (error) => {\n          console.log(error.message);\n          this.setState({validLogin: false})\n          \n        });\n       \n        \n    }\n     \n   \n \n    render(){\n      const formElementsArray = [];\n    for(let key in this.state.updateForm){\n      formElementsArray.push({\n        id: key,\n        config:this.state.updateForm[key]\n      })\n\n    }\n\n      return(\n    <Modal show={this.state.open == false ? this.state.show : this.state.show} onHide={this.handleClose}>\n    <Modal.Header closeButton>\n      <Modal.Title>Update the Request</Modal.Title>\n    </Modal.Header>\n    <Modal.Body><Form id='myForm'\n            className=\"form\">\n    <div>\n    {formElementsArray.map(formElement =>(\n       <Input\n            key={formElement.id}\n            elementType = {formElement.config.elementType}\n            elementConfig = {formElement.config.elementConfig}\n            value = {formElement.config.value}\n            label = {formElement.config.label}\n            changed = {(event) => this.inputChangedHandler(event, formElement.id )}\n       />\n     ))}</div>\n     </Form></Modal.Body>\n    \n    <Modal.Footer>\n      <Button variant=\"secondary\" onClick={this.handleClose}>\n        Close\n      </Button>\n      <Button variant=\"primary\" onClick={this.onSubmit}>\n        Save Changes\n      </Button>\n    </Modal.Footer>\n  </Modal>\n    );\n    }\n    }\n\nexport default UpdateModal;"]},"metadata":{},"sourceType":"module"}